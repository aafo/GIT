function TRT2SELFTEST()
%
%
% Author: Åge Andreas Falnes Olsen, Justervesenet
% Date: 07-dec-2012

plainFileTest();

wrapFileTest();

errorFileTest();

end

%% Tests


function plainFileTest()
%
% Tests reading a plain standard output file, with no errors. The test file
% is taken from real data. 
%

% read a standard 1-column file
fileName = plainFile(1);

trt = files.TRT2(fileName);
[d1, d2] = trt.read();
assert(isnumeric(d2), 'JV:SelftestFailed', ...
    'Expected last output to be a numeric array');
assert(isa(d1, 'Data1D'), 'JV:SelftestFailed', ...
    'Expected first output to be a Data1D object');
assert(length(d2) == length(d1.x), 'JV:SelftestFailed', ...
    'Expected the number of data values to be equal in both outputs');
assert(datenum('06-Dec-2012 08:24:38') == d1.x(1), 'JV:SelftestFailed', ...
    'Timestamp wrong in first measurement');


% read a standard 2-column file
fileName = plainFile(2);

trt = files.TRT2(fileName);
[d1, d2, d3] = trt.read();
assert(isnumeric(d3), 'JV:SelftestFailed', ...
    'Expected last output to be a numeric array');
assert(isa(d1, 'Data1D') & isa(d2, 'Data1D'), 'JV:SelftestFailed', ...
    'Expected first output to be a Data1D object');
assert(length(d3) == length(d1.x) + length(d2.x), 'JV:SelftestFailed', ...
    'Inconsistent number of data values');

% read a standard 3-column file
fileName = plainFile(3);

trt = files.TRT2(fileName);
[d1, d2, d3, d4] = trt.read();
assert(isnumeric(d4), 'JV:SelftestFailed', ...
    'Expected last output to be a numeric array');
assert(isa(d1, 'Data1D') & isa(d2, 'Data1D') & isa(d3, 'Data1D'), 'JV:SelftestFailed', ...
    'Expected first output to be a Data1D object');
assert(length(d4) == length(d1.x) + length(d2.x) + length(d3.x), 'JV:SelftestFailed', ...
    'Inconsistent number of data values');
assert(length(d1.x) == length(d2.x) & length(d2.x) == length(d3.x), ...
    'JV:SelftestFailed', ...
    'Inconsistent number of data values');


% Now try to read a file with unequal number of data points for the
% different data columns
% read a standard 3-column file
fileName = plainFile(3, 38);

trt = files.TRT2(fileName);
[d1, d2, d3, d4] = trt.read();
assert(length(d4) == length(d1.x) + length(d2.x) + length(d3.x), 'JV:SelftestFailed', ...
    'Inconsistent number of data values');
assert(length(d1.x) == length(d2.x) & length(d2.x) == length(d3.x) + 1, ...
    'JV:SelftestFailed', ...
    'Inconsistent number of data values');


end

function wrapFileTest()
%
% Tests that time readings are interpreted such that at midnight the time
% variable keeps rising (no wrapping at midnight)
%

fileName = timewrapFile();

trt = files.TRT2(fileName);
d1 = trt.read();

assert(all(diff(d1.x) > 0), 'JV:SelftestFailed', ...
    'The time vector is not monotonically increasing when crossing midnight');

end

function errorFileTest()
%
% Read a file containing errors in the data columns
%

fn = errorFile(2);

trt = files.TRT2(fn);

[d1, d2, d3] = trt.read();
assert(length(d3) == length(d1.x) + length(d2.x), 'JV:SelftestFailed', ...
    'Inconsistent file readout');
assert(length(d1.x) == 28, 'JV:SelftestFailed', ...
    'Some lines were ignored in a file with error lines');
assert(sum(isnan(d1.y)) == 5, 'JV:SelftestFailed', ...
    'Expected 5 error in the form of NaN, but got %d', sum(isnan(d1.y)));
assert(sum(isnan(d2.y)) == 4, 'JV:SelftestFailed', ...
    'Expected 5 error in the form of NaN, but got %d', sum(isnan(d1.y)));


end


%% Utilities

function fn = plainFile(nColumns, nLines)
%
% Creates a simple healthy data file with n data columns
%
% Currently n must be 1, 2 or 3.

if nargin < 2
    nLines = inf;
end

contents = fileHeader(nColumns);

data = {'         1	  08:24:38	         498,63',...
    '         2	  08:24:41	               	         142529',...
    '         3	  08:24:44	               	               	         461278',...
    '         4	  08:24:47	         498,61',...
    '         5	  08:24:50	               	         142506',...
    '         6	  08:24:53	               	               	         461190',...
    '         7	  08:24:56	         498,63',...
    '         8	  08:24:59	               	         142521',...
    '         9	  08:25:02	               	               	         461244',...
    '        10	  08:25:05	         498,62',...
    '        11	  08:25:08	               	         142554',...
    '        12	  08:25:11	               	               	         461316',...
    '        13	  08:25:14	         498,63',...
    '        14	  08:25:17	               	         142502',...
    '        15	  08:25:20	               	               	         461097',...
    '        16	  08:25:23	         498,61',...
    '        17	  08:25:26	               	         142522',...
    '        18	  08:25:29	               	               	         461169',...
    '        19	  08:25:32	         498,63',...
    '        20	  08:25:35	               	         142527',...
    '        21	  08:25:38	               	               	         461253',...
    '        22	  08:25:41	         498,60',...
    '        23	  08:25:44	               	         142509',...
    '        24	  08:25:47	               	               	         461235',...
    '        25	  08:25:50	         498,63',...
    '        26	  08:25:53	               	         142511',...
    '        27	  08:25:56	               	               	         461124',...
    '        28	  08:25:59	         498,59',...
    '        29	  08:26:02	               	         142519',...
    '        30	  08:26:05	               	               	         461105',...
    '        31	  08:26:08	         498,60',...
    '        32	  08:26:11	               	         142529',...
    '        33	  08:26:14	               	               	         461111',...
    '        34	  08:26:17	         498,60',...
    '        35	  08:26:20	               	         142488',...
    '        36	  08:26:23	               	               	         461173',...
    '        37	  08:26:26	         498,56',...
    '        38	  08:26:29	               	         142508',...
    '        39	  08:26:32	               	               	         461088',...
    '        40	  08:26:35	         498,57',...
    '        41	  08:26:38	               	         142482',...
    '        42	  08:26:41	               	               	         461126',...
    '        43	  08:26:44	         498,58',...
    '        44	  08:26:47	               	         142475',...
    '        45	  08:26:50	               	               	         461123'};

pth = tempname;
mkdir(pth);
fn = fullfile(pth,  'plainTRT2.txt');

if nLines > length(data)
    use = true(length(data), 1);
else
    use = true(nLines, 1);
end

if nColumns == 2
    use(3:3:end) = false;
elseif nColumns == 1
   use(3:3:end) = false;
   use(2:3:end) = false;
end 

fid = fopen(fn, 'w');
for q = 1:length(contents)
    fprintf(fid, '%s\n', contents{q});
end
printLines = find(use);
m = sum(use);
for q = 1:m
    fprintf(fid, '%s\n', data{printLines(q)});
end
fclose(fid);


end

function fn = errorFile(nColumns, nLines)


% Check that number of columns is 1 or 2

assert(nColumns < 3, 'JV:SelftestFailed', ...
    'Wrong usage of selftest function');

if nargin < 2
    nLines = inf;
end

header = fileHeader(nColumns);

data = {'     14435	  20:38:35	         141,41',...
    '     14436	  20:38:38	               	           2187',...
    '     14437	  20:38:41	         140,72',...
    '     14438	  20:38:44	               	           2161',...
    '     14439	  20:38:47	         140,38',...
    '     14440	  20:38:50	               	           2192',...
    '     14441	  20:38:53	         140,51',...
    '     14442	  20:38:56	               	           2168',...
    '     14443	  20:38:59	         140,68',...
    '     14444	  20:39:02	               	           2172',...
    '     14445	  20:39:05	         140,53',...
    '     14446	  20:39:08	               	           2150',...
    '     14447	  20:39:11	         140,54',...
    '     14448	  20:39:14	               	           2161',...
    '     14449	  20:39:17	         141,37',...
    '     14450	  20:39:20	                    "ERROR 20 UNDERFLOW"',...
    '     14451	  20:39:23	         140,48',...
    '     14452	  20:39:26	               	           2146',...
    '     14453	  20:39:29	         140,92',...
    '     14454	  20:39:32	               	           2162',...
    '     14455	  20:39:35	         140,25',...
    '     14456	  20:39:38	               	           2162',...
    '     14457	  20:39:41	         140,57',...
    '     14458	  20:39:44	               	           2185',...
    '     14459	  20:39:47	                    "ERROR 20 UNDERFLOW"',...
    '     14460	  20:39:50	               	           2157',...
    '     14461	  20:39:53	                    "ERROR 20 UNDERFLOW"',...
    '     14462	  20:39:56	                    "ERROR 20 UNDERFLOW"',...
    '     14463	  20:39:59	         140,61',...
    '     14464	  20:40:02	               	           2168',...
    '     14465	  20:40:05	         140,26',...
    '     14466	  20:40:08	               	           2154',...
    '     14467	  20:40:11	         140,13',...
    '     14468	  20:40:14	               	           2153',...
    '     14469	  20:40:17	                    "ERROR 20 UNDERFLOW"',...
    '     14470	  20:40:20	               	           2168',...
    '     14471	  20:40:23	         141,20',...
    '     14472	  20:40:26	               	           2159',...
    '     14473	  20:40:29	         140,51',...
    '     14474	  20:40:32	                    "ERROR 20 UNDERFLOW"',...
    '     14475	  20:40:35	         140,92',...
    '     14476	  20:40:38	               	           2175',...
    '     14477	  20:40:41	         140,62',...
    '     14478	  20:40:44	               	           2166',...
    '     14479	  20:40:47	                    "ERROR 20 UNDERFLOW"',...
    '     14480	  20:40:50	               	           2170',...
    '     14481	  20:40:53	         140,60',...
    '     14482	  20:40:56	               	           2175',...
    '     14483	  20:40:59	                    "ERROR 20 UNDERFLOW"',...
    '     14484	  20:41:02	               	           2165',...
    '     14485	  20:41:05	         140,32',...
    '     14486	  20:41:08	               	           2152',...
    '     14487	  20:41:11	         140,49',...
    '     14488	  20:41:14	               	           2167',...
    '     14489	  20:41:17	         140,41',...
    '     14490	  20:41:20	                    "ERROR 20 UNDERFLOW"'};


pth = tempname;
mkdir(pth);
fn = fullfile(pth, 'errorTRT2.txt');

if nLines > length(data)
    use = true(length(data), 1);
else
    use = true(nLines, 1);
end

if nColumns == 1
    use(2:2:end) = false;
end 

fid = fopen(fn, 'w');
for q = 1:length(header)
    fprintf(fid, '%s\n', header{q});
end
printLines = find(use);
m = sum(use);
for q = 1:m
    fprintf(fid, '%s\n', data{printLines(q)});
end

fclose(fid);

end

function fn = timewrapFile()
%
% Create a test file which has times wrapping at midnight
%

contents = fileHeader(3);

data = {'         1	  23:58:38	         498,63',...
    '         2	  23:58:41	               	         142529',...
    '         3	  23:58:44	               	               	         461278',...
    '         4	  23:58:47	         498,61',...
    '         5	  23:58:50	               	         142506',...
    '         6	  23:58:53	               	               	         461190',...
    '         7	  23:58:56	         498,63',...
    '         8	  23:58:59	               	         142521',...
    '         9	  23:59:02	               	               	         461244',...
    '        10	  23:59:05	         498,62',...
    '        11	  23:59:08	               	         142554',...
    '        12	  23:59:11	               	               	         461316',...
    '        13	  23:59:14	         498,63',...
    '        14	  23:59:17	               	         142502',...
    '        15	  23:59:20	               	               	         461097',...
    '        16	  23:59:23	         498,61',...
    '        17	  23:59:26	               	         142522',...
    '        18	  23:59:29	               	               	         461169',...
    '        19	  23:59:32	         498,63',...
    '        20	  23:59:35	               	         142527',...
    '        21	  23:59:38	               	               	         461253',...
    '        22	  23:59:41	         498,60',...
    '        23	  23:59:44	               	         142509',...
    '        24	  23:59:47	               	               	         461235',...
    '        25	  23:59:50	         498,63',...
    '        26	  23:59:53	               	         142511',...
    '        27	  23:59:56	               	               	         461124',...
    '        28	  23:59:59	         498,59',...
    '        29	  00:00:02	               	         142519',...
    '        30	  00:00:05	               	               	         461105',...
    '        31	  00:00:08	         498,60',...
    '        32	  00:00:11	               	         142529',...
    '        33	  00:00:14	               	               	         461111',...
    '        34	  00:00:17	         498,60',...
    '        35	  00:00:20	               	         142488',...
    '        36	  00:00:23	               	               	         461173',...
    '        37	  00:00:26	         498,56',...
    '        38	  00:00:29	               	         142508',...
    '        39	  00:00:32	               	               	         461088',...
    '        40	  00:00:35	         498,57',...
    '        41	  00:00:38	               	         142482',...
    '        42	  00:00:41	               	               	         461126',...
    '        43	  00:00:44	         498,58',...
    '        44	  00:00:47	               	         142475',...
    '        45	  00:00:50	               	               	         461123'};

pth = tempname;
mkdir(pth);
fn = fullfile(pth,  'wrappingTRT2.txt');

fid = fopen(fn, 'w');
for q = 1:length(contents)
    fprintf(fid, '%s\n', contents{q});
end
for q = 1:length(data)
    fprintf(fid, '%s\n', data{q});
end

fclose(fid);


end

function contents = fileHeader(nColumns)
%
% Return a cell array of strings with text header from TRT2 files. The
% column names are added according to nColums:
%
% nColumns = 1: Number	      time	       Value/'C
% nColumns = 2: Number	      time	       Value/'C	            RAD
% nColumns = 3: Number	      time	       Value/'C	            RAD	           DSIG	
% 
%
%

contents = {'"Comment: "',...
    '"First value: 08:36:53 06.12.2012"',...
    '"Last value: 07:45:38 07.12.2012"',...
    '"Number of readings 27776"',...
    '',...
    '"Pyrometer: TRT2.41 DET A SN 2127  150 1000 C"',...
    '"Response time: 3 s"',...
    '"Emissivity: 1.000"',...
    '"Reference: Internal"',...
    '"Temperature unit ''C"',...
    '',...
    'Number	      time	       Value/''C	            RAD	           DSIG	',...
    ''};

switch nColumns
    case 1
        contents{end-1} = 'Number	      time	       Value/''C ';
    case 2
        contents{end-1} = 'Number	      time	       Value/''C	            RAD ';
    case 3
        contents{end-1} = 'Number	      time	       Value/''C	            RAD	           DSIG	';
    otherwise
        error('JV:SelftestFailed', 'Wrong usage of SELFTEST function');
end


end

